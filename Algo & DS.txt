     DATA STRUCTURE        |             STL         |        DOUBTS           |       ALGORITHMS
    ----------------       |           -------       |       --------          |     --------------
Array                      |   array                 |  Euler Tour Traversal   |   Divide and conquer
Linked List                |                         |                         |   Dynamic programming
Stack                      |   stack                 |                         |   Greedy algorithm
Queue(circular queue)      |   queue                 |                         |   Tortoise and hare
Deque                      |   deque                 |                         |   Floyd Cycle Detection
Vector                     |   vector                |                         |
Iterator                   |   iterator              |                         |
List                       |   list                  |                         |
Sequence                   |                         |                         |
Tree                       |                         |                         |
Priority Queue             |   priority_queue        |                         |
Heap                       |                         |                         |
Map                        |   map                   |                         |
Hash Table                 |                         |                         |








1. BINARY TREES    // similar for linked list
----------------                     |
                                     |   * level of root is 1
struct node                          |
{                                    |   * we can make array of " node * " for simplicity
   int data;                         |    node * arr[n+1];
   node* left;                       |
   node* right;                      |    node * root = newnode();
};                                   |    arr[1] = root;
                                     |    for(int i=2;i<=n;i++)
node* newNode(int element)           |    {
{                                    |       arr[i]=newnode();
  node* temp = new node;             |    }
  temp->data = element;              |
  temp->left = NULL;                 |
  temp->right = NULL;                |
  return temp;                       |
}                                    |
                                     |
int main()                           |
{                                    |
    node * root = NULL;              |
or  node* root = newNode(1);         |
}

 i)   void preorder(node * root);
 ii)  void inorder(node * root);
 iii) void postorder(node * root);
 iv)  node * insert(node * root, int data);
 v)   int maxDepth(node * root);





2. GRAPHS
----------



   class Graph
   {
     int V;
     list<int> *Adj;
    public:
     Graph(int V)
     {
       this->V = V;
       Adj = new list<int>[V];
     }
     void addEdge(int v,int w)
     {
       Adj[v].push_back(w);
     }
   };




   int main()
   {
       int x,y,nodes,edges;
       cin>>nodes;      \\no. of nodes
       cin>>edges;

       int Amat[nodes][nodes];            \\ Adjacency matrix
       for(int i=0;i<nodes;i++)
       {for(int j=0;j<nodes;j++)
        {
           cin>>x>>y;
           A[x][y]=1;
        }
       }


        vector<int> Alis[nodes];           \\Adjacency list
        for(int i=0;i<edges;i++)
        {
           cin>>x>>y;
           Alis[x].push_back(y);
        }




        struct node                        \\Adjacency list using linked list
        {
            int data;
            node* next;
        };

        node* Alis[nodes];




3. Stack implementation
-------------------------

    class Stack                    //arary implementation
    {
       int arr[1000];
       int top;
      public:
       Stack() {top = -1;}
       int pop();
       void push(int);
       bool isEmpty();
    };





    struct stackNode               // linked list implementation
    {
       int data;
       stackNode* next;
    };

    class Stack
    {
      stackNode* top;
     public :
      Stack(){top = NULL ;}
      void push(int);
      int pop();
      bool isEmpty();
    };








4. Queue implementation
------------------------

  class queue                           //arrya implementation
  {
     int arr[1000];
     int front;
     int rear;
    public:
     Queue() {front=0;rear=0;}
     void push(int);
     int pop();
     bool isEmpty();
  };



  struct queueNode                      //Linked list implementation
  {
     int data;
     queueNode* next;
  }

  class Queue
  {
     queueNode* front;
     queueNode* rear;
    public:
     Queue(){front=NULL;rear=NULL;}
     void push(int);
     int pop();
     bool isEmpty();
  };




5. Stack and Queue <stack> / <queue>
-------------------

  stack<int>  stk;
  queue<int>  que;
  priority_queue<int> pq;    //<queue> - stores max at top always

 * stk.empty(); | que.empty(); | pq.empty();  // bool
 * stk.size();  | que.size();  | pq.size();   // size_type(int)
 * stk.push(n); | que.push(n); | pq.push(n);  // void
 * stk.pop();   | que.pop();   | pq.pop();    // void
 * stk.top();   | que.front(); | pq.top();    // int
                | que.back();  |              // int





6. Heap
----------


    class Maxheap
    {
       int heap_size;
       int capacity;
       int* harr;
      public()
       Maxheap(int cap)
       {
         heap_size = 0;
         capacity = cap;
         harr = new int[cap];
       }
       void MaxHeapify(int);                       //heapify at index i
       int getMax();                               //return value of root(max in heap)
       int extractMax();                           //remove the root then maintain heap
       void increseKey(int i,int new_val);         //increase value at index i then maintain Maxheap
       void insertKey(int k);                      //insert an element then maintain heap
       void deleteKey(int i);                      //delete an element then maintain heap
    }




7. Hash tables
--------------




8. Segment trees                                  h = ceil(log2(n))   // n is array size
----------------                           stsize = (2*pow(2,h))-1;   // stsize is segment tree size



int buildST(int arr[],int start,int end,int segtree[],int index)                       // For building segment tree we can declare array "segtree[size]" in main()
{
if(start == end)                                                                        // or declare array dynamically in buildST() using pointer "int* st = new int[size]"
{
  segtree[index] = arr[start];                                                          // normal "segtree[size]" array is not declares in buildST() cause when the
  return segtree[index];                                                                // function is popped from stacked it the memory can be allocated to other variables
}
int  mid = (start + end )/2;
segtree[index] = buildST(arr,start,mid,segtree,2*index+1) + buildST(arr,mid+1,end,segtree,2*index+2);
return segtree[index];
}


      For dynamically declared segment tree
--------------------------------------------------------------------


int buildSTUtil(int arr[], int ss, int se, int *st, int si)
{
    if (ss == se)
    {
        st[si] = arr[ss];
        return arr[ss];
    }

    int mid = (ss + se)/2;
    st[si] =  buildSTUtil(arr, ss, mid, st, si*2+1) + buildSTUtil(arr, mid+1, se, st, si*2+2);

    return st[si];
}

int* buildST(int arr[], int n)
{

    int x = ceil(log2(n));
    int max_size = 2*pow(2, x) - 1;

    int *st = new int[max_size];

    buildSTUtil(arr, 0, n-1, st, 0);

    return st;
}





int getsumUtil(int* st,int as,int ae,int qs,int qe,int i)
{
  if(qs<=as && qe>=ae)
    return st[i];

  if(qe<as || qs>ae)
    return 0;

  int am = (as+ae)/2;
  return getsumUtil(st,as,am,qs,qe,2*i+1)+getsumUtil(st,am+1,ae,qs,qe,2*i+2);
}


int getsum(int arr[],int* st,int n,int qs,int qe)                                    // this is function that is called in main()
{                                                                                    // qs -> query start , qe -> query end
  if(qs<0 || qe>(n-1) || qs>qe)
    return -1;

  return getsumUtil(st,0,n-1,qs,qe,0);

}



void updateValueUtil(int *st, int ss, int se, int i, int diff, int si)
{
    if (i < ss || i > se)
        return;

    st[si] = st[si] + diff;
    if (se != ss)
    {
        int mid = getMid(ss, se);
        updateValueUtil(st, ss, mid, i, diff, 2*si + 1);
        updateValueUtil(st, mid+1, se, i, diff, 2*si + 2);
    }
}

void updateValue(int arr[], int *st, int n, int i, int new_val)                    //this function is called in main()
{

    if (i < 0 || i > n-1)
    {
        printf("Invalid Input");
        return;
    }

    int diff = new_val - arr[i];
    arr[i] = new_val;

    updateValueUtil(st, 0, n-1, i, diff, 0);
}











9. Trie
--------

10.AVL trees
--------------

11. Red Black Trees
--------------------

12. Fenwick tree / Binary indexed tree
-------------------------------------




13. Union find disjoint set
--------------------------




14. Suffix array
---------------
